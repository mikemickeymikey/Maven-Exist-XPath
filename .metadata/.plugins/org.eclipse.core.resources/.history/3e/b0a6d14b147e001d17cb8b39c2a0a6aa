package practicaExist;

import java.io.File;
import org.xmldb.api.DatabaseManager;
import org.xmldb.api.modules.XPathQueryService;
import org.xmldb.api.base.*;
import org.xmldb.api.modules.*;
import org.xmldb.api.*;
import javax.xml.transform.OutputKeys;

import org.checkerframework.common.returnsreceiver.qual.This;
import org.exist.xmldb.EXistResource;


public class XMLManager {
	private final String driver = "org.exist.xmldb.DatabaseImpl";
	private final String URI = "xmldb:exist://localhost:8080/exist/xmlrpc";
	private final Database db = (Database)Class.forName(driver).newInstance();
	private Collection coleccio;
	private XPathQueryService servei;
	
	public XMLManager(String coleccio) throws Exception{
		final String driver = "org.exist.xmldb.DatabaseImpl";
		Class cl = Class.forName(driver);
		DatabaseManager.registerDatabase(db);
		String col = URI + coleccio;
		String usu = "admin";
		String pw = "";
		this.coleccio = (Collection)DatabaseManager.getCollection(col, usu, pw);
		servei = (XPathQueryService)((org.xmldb.api.base.Collection) this.coleccio).getService("XPathQueryService", "1.0");
	}
	
	public void afegirRecurs(String fileName) {
		File fitxer = new File("mondial.xml");
		if(!fitxer.canRead()) System.out.println("NO ES POT OBRIR EL FITXER MONDIAL.XML");
		else{ 
			try {
				Resource recurs = ((org.xmldb.api.base.Collection) coleccio).createResource(fileName, "XMLResource"); 
				recurs.setContent(fileName);
				((org.xmldb.api.base.Collection) coleccio).storeResource(recurs);
			} catch (XMLDBException e) {
				System.out.println("No es pot afegir el recurs.");
			} 
		};
	}
	
	public void eliminarRecurs(String fileName) {
		try { 
			Resource recursoParaBorrar = ((org.xmldb.api.base.Collection) coleccio).getResource("NUEVOS_DEP.xml"); 
			((org.xmldb.api.base.Collection) coleccio).removeResource(recursoParaBorrar);
		}
		catch(XMLDBException e) {
			System.out.println("No es pot esborrar el recurs.");
		} 
	}
	
	public void close() throws Exception {
		DatabaseManager.deregisterDatabase(db);
	}
	
	/*Retorna la illa amb l'elevació més alta. */
	public double IllaMesElevada() throws Exception {
		String consulta = "doc('mondial.xml')/mondial/island/height";
		ResourceSet result = null;
		result = servei.query("max(" + consulta + ")");
		
		if(result != null) {
			ResourceIterator i = result.getIterator();
			if(i.hasMoreResources())
				return Double.parseDouble(i.nextResource().getContent().toString());
		}
		return -1;
	}
	
	
	
	
	
	
	
	
	
	
	
}
